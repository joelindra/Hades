#!/bin/bash

# HADES - Elegant Security Testing Framework
# Version 6.0 - Modern Edition
# Author: Joel Indra - Anonre

# Simplified but elegant color palette
declare -A COLORS=(
    [PRIMARY]='\e[38;2;120;200;255m'    # Soft blue
    [ACCENT]='\e[38;2;255;125;175m'     # Soft pink
    [SUCCESS]='\e[38;2;125;255;175m'    # Soft green
    [WARNING]='\e[38;2;255;230;125m'    # Soft yellow
    [DANGER]='\e[38;2;255;125;125m'     # Soft red
    [MUTED]='\e[38;2;150;150;180m'      # Muted purple
    [BRIGHT]='\e[38;2;235;235;255m'     # Bright white
    [DIM]='\e[38;2;100;100;120m'        # Dim gray
)

# Effects
BOLD='\e[1m'
ITALIC='\e[3m'
RESET='\e[0m'

# Configuration
VERSION="6.0"
AUTHOR="Joel Indra - Anonre"
YEAR=$(date +%Y)
SCAN_DATE=$(date +"%d-%m-%Y %H:%M:%S")
SESSION_ID=$(date +%s | sha256sum | cut -c1-12)

# Enable error handling
set -e
trap 'elegant_error $LINENO' ERR

# Elegant typing animation
elegant_type() {
    local text="$1"
    local speed=${2:-0.03}
    
    for ((i=0; i<${#text}; i++)); do
        echo -n "${text:$i:1}"
        sleep $speed
    done
    echo
}

# Elegant progress bar
elegant_progress() {
    local task_name=$1
    local duration=${2:-0.01}
    local width=40
    local progress=0
    
    echo -e "\n${COLORS[MUTED]}┌─ ${COLORS[ACCENT]}${task_name} ${COLORS[MUTED]}─┐${RESET}"
    
    while [ $progress -le 100 ]; do
        local filled=$((width * progress / 100))
        local empty=$((width - filled))
        
        # Progress bar
        echo -ne "\r${COLORS[DIM]}│${RESET} "
        
        # Filled portion
        for ((i=0; i<filled; i++)); do
            echo -ne "${COLORS[PRIMARY]}█${RESET}"
        done
        
        # Empty portion
        for ((i=0; i<empty; i++)); do
            echo -ne "${COLORS[DIM]}▒${RESET}"
        done
        
        echo -ne " ${COLORS[DIM]}│${RESET} ${COLORS[BRIGHT]}${progress}%${RESET} "
        
        progress=$((progress + 1))
        sleep $duration
    done
    
    echo -e "\n${COLORS[MUTED]}└───────────────────────────────────────┘${RESET}\n"
}

# Elegant error handler
elegant_error() {
    local line=$1
    echo -e "\n${COLORS[DANGER]}${BOLD}╔════════════════════════════════════╗${RESET}"
    echo -e "${COLORS[DANGER]}${BOLD}║ Error detected at line $line         ${RESET}"
    echo -e "${COLORS[DANGER]}${BOLD}╚════════════════════════════════════╝${RESET}"
    exit 1
}

# Elegant banner
display_banner() {
    clear
    
    # Direct printing for proper color rendering
    echo -e "${COLORS[PRIMARY]}${BOLD}┌───────────────────────────────────────────────┐"
    echo -e "${COLORS[PRIMARY]}│                                               │"
    echo -e "${COLORS[PRIMARY]}│  ${COLORS[ACCENT]}╦ ╦╔═╗╔╦╗╔═╗╔═╗${COLORS[PRIMARY]}                              │"
    echo -e "${COLORS[PRIMARY]}│  ${COLORS[ACCENT]}╠═╣╠═╣ ║║║╣ ╚═╗${COLORS[PRIMARY]}                              │"
    echo -e "${COLORS[PRIMARY]}│  ${COLORS[ACCENT]}╩ ╩╩ ╩═╩╝╚═╝╚═╝${COLORS[PRIMARY]}                              │"
    echo -e "${COLORS[PRIMARY]}│                                               │"
    echo -e "${COLORS[PRIMARY]}│  ${COLORS[SUCCESS]}Security Testing Framework v${VERSION}${COLORS[PRIMARY]}              │"
    echo -e "${COLORS[PRIMARY]}│  ${COLORS[MUTED]}Created by: ${COLORS[BRIGHT]}${AUTHOR} © ${YEAR}${COLORS[PRIMARY]}       │"
    echo -e "${COLORS[PRIMARY]}└───────────────────────────────────────────────┘${RESET}"
    
    # Optional animation after the banner is displayed
    sleep 0.3
    
    # System info with elegant styling
    echo -e "\n${COLORS[PRIMARY]}┌───────────────────────────────────────────────┐${RESET}"
    echo -e "${COLORS[PRIMARY]}│ ${COLORS[WARNING]}System Information${COLORS[PRIMARY]}                      ${RESET}"
    echo -e "${COLORS[PRIMARY]}│────────────────────────────────────────────────${RESET}"
    echo -e "${COLORS[PRIMARY]}│ ${COLORS[SUCCESS]}• Kernel    ${COLORS[MUTED]}| ${COLORS[BRIGHT]}$(uname -r)${COLORS[PRIMARY]}${RESET}"
    echo -e "${COLORS[PRIMARY]}│ ${COLORS[SUCCESS]}• Machine   ${COLORS[MUTED]}| ${COLORS[BRIGHT]}$(uname -m)${COLORS[PRIMARY]}${RESET}"
    echo -e "${COLORS[PRIMARY]}│ ${COLORS[SUCCESS]}• Session   ${COLORS[MUTED]}| ${COLORS[BRIGHT]}$SESSION_ID${COLORS[PRIMARY]}${RESET}"
    echo -e "${COLORS[PRIMARY]}│ ${COLORS[SUCCESS]}• Timestamp ${COLORS[MUTED]}| ${COLORS[BRIGHT]}$SCAN_DATE${COLORS[PRIMARY]}${RESET}"
    echo -e "${COLORS[PRIMARY]}└───────────────────────────────────────────────┘${RESET}\n"
}

# Elegant help display
display_help() {
    display_banner
    
    # Reconnaissance
    echo -e "${COLORS[PRIMARY]}┌─ ${COLORS[SUCCESS]}Reconnaissance${COLORS[PRIMARY]} ────────────────────────┐${RESET}"
    echo -e "${COLORS[PRIMARY]}│ ${COLORS[BRIGHT]}-d ${COLORS[MUTED]}--mass-recon    ${COLORS[WARNING]}Mass Target Scan${COLORS[PRIMARY]}   ${RESET}"
    echo -e "${COLORS[PRIMARY]}│ ${COLORS[BRIGHT]}-s ${COLORS[MUTED]}--single-recon  ${COLORS[WARNING]}Single Target Scan${COLORS[PRIMARY]} ${RESET}"
    echo -e "${COLORS[PRIMARY]}│ ${COLORS[BRIGHT]}-f ${COLORS[MUTED]}--port-scan  ${COLORS[WARNING]}Single Target Scan${COLORS[PRIMARY]} ${RESET}"
    echo -e "${COLORS[PRIMARY]}└─────────────────────────────────────────┘${RESET}\n"
    
    # Injection
    echo -e "${COLORS[ACCENT]}┌─ ${COLORS[SUCCESS]}Injection Testing${COLORS[ACCENT]} ─────────────────────┐${RESET}"
    echo -e "${COLORS[ACCENT]}│ ${COLORS[BRIGHT]}-p ${COLORS[MUTED]}--mass-sql     ${COLORS[WARNING]}SQL Injection Scan${COLORS[ACCENT]}  ${RESET}"
    echo -e "${COLORS[ACCENT]}│ ${COLORS[BRIGHT]}-o ${COLORS[MUTED]}--single-sql   ${COLORS[WARNING]}SQL Injection Test${COLORS[ACCENT]}  ${RESET}"
    echo -e "${COLORS[ACCENT]}│ ${COLORS[BRIGHT]}-w ${COLORS[MUTED]}--mass-xss     ${COLORS[WARNING]}XSS Vulnerability${COLORS[ACCENT]}   ${RESET}"
    echo -e "${COLORS[ACCENT]}│ ${COLORS[BRIGHT]}-x ${COLORS[MUTED]}--single-xss   ${COLORS[WARNING]}XSS Payload Test${COLORS[ACCENT]}    ${RESET}"
    echo -e "${COLORS[ACCENT]}│ ${COLORS[BRIGHT]}-n ${COLORS[MUTED]}--single-lfi   ${COLORS[WARNING]}LFI Exploit${COLORS[ACCENT]}         ${RESET}"
    echo -e "${COLORS[ACCENT]}└─────────────────────────────────────────┘${RESET}\n"
    
    # Special ops
    echo -e "${COLORS[WARNING]}┌─ ${COLORS[SUCCESS]}Special Operations${COLORS[WARNING]} ────────────────────┐${RESET}"
    echo -e "${COLORS[WARNING]}│ ${COLORS[BRIGHT]}-m ${COLORS[MUTED]}--mass-assess  ${COLORS[PRIMARY]}Full Assessment${COLORS[WARNING]}    ${RESET}"
    echo -e "${COLORS[WARNING]}│ ${COLORS[BRIGHT]}-y ${COLORS[MUTED]}--sub-takeover ${COLORS[PRIMARY]}Subdomain Takeover${COLORS[WARNING]} ${RESET}"
    echo -e "${COLORS[WARNING]}│ ${COLORS[BRIGHT]}-q ${COLORS[MUTED]}--dir-patrol   ${COLORS[PRIMARY]}Directory Scanner${COLORS[WARNING]}  ${RESET}"
    echo -e "${COLORS[WARNING]}│ ${COLORS[BRIGHT]}-l ${COLORS[MUTED]}--js-finder    ${COLORS[PRIMARY]}JS Secret Finder${COLORS[WARNING]}   ${RESET}"
    echo -e "${COLORS[WARNING]}│ ${COLORS[BRIGHT]}-k ${COLORS[MUTED]}--mass-cors    ${COLORS[PRIMARY]}CORS Misconfig${COLORS[WARNING]}     ${RESET}"
    echo -e "${COLORS[WARNING]}│ ${COLORS[BRIGHT]}-u ${COLORS[MUTED]}--mass-csrf    ${COLORS[PRIMARY]}CSRF Weakness${COLORS[WARNING]}      ${RESET}"
    echo -e "${COLORS[WARNING]}└─────────────────────────────────────────┘${RESET}\n"
    
    # System
    echo -e "${COLORS[DANGER]}┌─ ${COLORS[SUCCESS]}System${COLORS[DANGER]} ────────────────────────────────┐${RESET}"
    echo -e "${COLORS[DANGER]}│ ${COLORS[BRIGHT]}-i ${COLORS[MUTED]}--install      ${COLORS[PRIMARY]}Install Dependencies${COLORS[DANGER]} ${RESET}"
    echo -e "${COLORS[DANGER]}│ ${COLORS[BRIGHT]}-h ${COLORS[MUTED]}--help         ${COLORS[PRIMARY]}Display Commands${COLORS[DANGER]}     ${RESET}"
    echo -e "${COLORS[DANGER]}└─────────────────────────────────────────┘${RESET}\n"
    
    echo -e "${COLORS[BRIGHT]}Usage: ${COLORS[MUTED]}./hades [options]${RESET}"
    echo -e "${COLORS[BRIGHT]}Repo:  ${COLORS[SUCCESS]}https://github.com/joelindra/hades${RESET}\n"
}

# Module execution with elegant animation
execute_module() {
    local module_name=$1
    local script_path=$2
    
    echo -e "\n${COLORS[ACCENT]}╔═════════════════════════════════════════╗${RESET}"
    echo -e "${COLORS[ACCENT]}║ ${COLORS[WARNING]}Executing Module${COLORS[ACCENT]}                      ║${RESET}"
    echo -e "${COLORS[ACCENT]}╠═════════════════════════════════════════╣${RESET}"
    echo -e "${COLORS[ACCENT]}║ ${COLORS[SUCCESS]}• Module   ${COLORS[MUTED]}| ${COLORS[BRIGHT]}${module_name}${COLORS[ACCENT]}${RESET}"
    echo -e "${COLORS[ACCENT]}║ ${COLORS[SUCCESS]}• Script   ${COLORS[MUTED]}| ${COLORS[BRIGHT]}${script_path}${COLORS[ACCENT]}${RESET}"
    echo -e "${COLORS[ACCENT]}║ ${COLORS[SUCCESS]}• Time     ${COLORS[MUTED]}| ${COLORS[BRIGHT]}$(date +"%H:%M:%S")${COLORS[ACCENT]}${RESET}"
    echo -e "${COLORS[ACCENT]}╚═════════════════════════════════════════╝${RESET}"
    
    # Loading animation
    elegant_progress "Loading Module" 0.008
    
    # Execute
    if source "./function/$script_path" 2>/tmp/hades_error.log; then
        echo -e "${COLORS[SUCCESS]}${BOLD}✓ Module executed successfully${RESET}\n"
    else
        echo -e "${COLORS[DANGER]}${BOLD}✗ Module execution failed${RESET}"
        cat /tmp/hades_error.log
        exit 1
    fi
}

# Options mapping
declare -A options_map=(
    # Reconnaissance
    [-d]="m-recon.sh"
    [--mass-recon]="m-recon.sh"
    [-s]="s-recon.sh"
    [--single-recon]="s-recon.sh"
    [-f]="s-port.sh"
    [--port-scan]="s-port.sh"
    
    # Injection
    [-p]="m-sqli.sh"
    [--mass-sql]="m-sqli.sh"
    [-o]="s-sqli.sh"
    [--single-sql]="s-sqli.sh"
    [-w]="m-xss.sh"
    [--mass-xss]="m-xss.sh"
    [-x]="s-xss.sh"
    [--single-xss]="s-xss.sh"
    [-n]="s-lfi.sh"
    [--single-lfi]="s-lfi.sh"
    
    # Assessment
    [-m]="m-scan.sh"
    [--mass-assess]="m-scan.sh"
    
    # Special
    [-y]="takeover.sh"
    [--sub-takeover]="takeover.sh"
    [-u]="m-csrf.sh"
    [--mass-csrf]="m-csrf.sh"
    [-q]="dir-scan.sh"
    [--dir-patrol]="dir-scan.sh"
    [-l]="m-js.sh"
    [--js-finder]="m-js.sh"
    [-k]="m-cors.sh"
    [--mass-cors]="m-cors.sh"
    
    # System
    [-i]="all-req.sh"
    [--install]="all-req.sh"
    [-h]="help"
    [--help]="help"
)

# Update check with animation
check_updates() {
    echo -e "${COLORS[MUTED]}┌─ ${COLORS[WARNING]}Update Check ${COLORS[MUTED]}─┐${RESET}"
    echo -ne "${COLORS[MUTED]}│ ${COLORS[BRIGHT]}Checking"
    
    for ((i=0; i<3; i++)); do
        sleep 0.3
        echo -ne "."
    done
    
    echo -e " ${COLORS[SUCCESS]}✓${COLORS[MUTED]}    │${RESET}"
    echo -e "${COLORS[MUTED]}│ ${COLORS[SUCCESS]}Latest version${COLORS[MUTED]}  │${RESET}"
    echo -e "${COLORS[MUTED]}└──────────────────┘${RESET}\n"
}

# Main execution
main() {
    # Display banner
    display_banner
    
    # Check updates
    check_updates
    
    # No arguments
    if [[ $# -eq 0 ]]; then
        display_help
        exit 0
    fi
    
    # Session start
    echo -e "${COLORS[PRIMARY]}╔═════════════════════════════════════════╗${RESET}"
    echo -e "${COLORS[PRIMARY]}║ ${COLORS[WARNING]}Session Initiated${COLORS[PRIMARY]}                     ║${RESET}"
    echo -e "${COLORS[PRIMARY]}║ ${COLORS[SUCCESS]}• ID ${COLORS[MUTED]}| ${COLORS[BRIGHT]}${SESSION_ID}${COLORS[PRIMARY]}                   ║${RESET}"
    echo -e "${COLORS[PRIMARY]}╚═════════════════════════════════════════╝${RESET}"
    
    # Process options
    for option in "$@"; do
        local script="${options_map[$option]}"
        
        if [[ -z "$script" ]]; then
            echo -e "\n${COLORS[DANGER]}${BOLD}✗ Invalid command: $option${RESET}"
            display_help
            exit 1
        fi
        
        if [[ "$script" == "help" ]]; then
            display_help
            continue
        fi
        
        echo -ne "${COLORS[ACCENT]}Initializing $option... ${RESET}"
        sleep 0.5
        echo -e "${COLORS[SUCCESS]}ready${RESET}\n"
        execute_module "$option" "$script"
    done
    
    # Session end
    echo -e "${COLORS[SUCCESS]}╔═════════════════════════════════════════╗${RESET}"
    echo -e "${COLORS[SUCCESS]}║ ${COLORS[WARNING]}Session Complete${COLORS[SUCCESS]}                      ║${RESET}"
    echo -e "${COLORS[SUCCESS]}║ ${COLORS[BRIGHT]}• Time   ${COLORS[MUTED]}| ${COLORS[ACCENT]}$(date +"%H:%M:%S")${COLORS[SUCCESS]}                ║${RESET}"
    echo -e "${COLORS[SUCCESS]}║ ${COLORS[BRIGHT]}• Status ${COLORS[MUTED]}| ${COLORS[SUCCESS]}All operations successful${COLORS[SUCCESS]}     ║${RESET}"
    echo -e "${COLORS[SUCCESS]}╚═════════════════════════════════════════╝${RESET}\n"
    
    # Simple exit
    echo -e "${COLORS[BRIGHT]}Thank you for using HADES${RESET}"
    sleep 0.5
}

# Execute main
main "$@"
