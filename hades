#!/usr/bin/bash

# Color Definitions
RED='\e[31m'
CYAN='\e[36m'
GREEN='\e[32m'
YELLOW='\e[93m'
RESET='\e[0m'

# Enable script to exit on error
set -e

# Valid options (sorted by relevance)
declare -A options_map=(
    [-d]="massrecon.sh"          # Mass Recon (more common for larger-scale scanning)
    [-s]="singlerecon.sh"        # Single Recon (specific but common for a single target)
    [-p]="masssqlinject.sh"      # Mass SQL Injection (important for vulnerability scanning)
    [-o]="ssqlinject.sh"         # Single SQL Injection (specific attack)
    [-w]="massxss.sh"            # Mass XSS Injection (common web vulnerability)
    [-x]="singlexss.sh"          # Single XSS Injection (specific but common)
    [-n]="singlelfi.sh"          # Single LFI Injection (specific vulnerability)
    [-m]="massassessment.sh"     # Mass Assessment (general security assessment)
    [-v]="massdomxss.sh"         # Mass DOM XSS Exploit (web security)
    [-y]="subover.sh"            # Subdomain Takeover (specific attack, but increasingly relevant)
    [-q]="dirsearchpatrol.sh"    # Dirsearch Patrol (useful but less frequent)
    [-l]="massjsfinder.sh"       # Mass JS Finder (niche but useful for web apps)
    [-i]="installreq.sh"         # Install Requirements (important for initial setup)
    [-h]="help.sh"               # Help (always relevant but used last)
)

# Function to display help message
display_help() {
    clear
    echo -e "$CYAN"
    echo -e "Usage: ./hades [options]"
    echo -e "Created by $GREEN joelindra | $YELLOW Linkedin: joelindra $RESET"
    echo -e "\nAvailable Options:"
    echo -e "  $CYAN-d, $GREEN --mass-recon          $CYAN Mass Recon"
    echo -e "  $CYAN-s, $GREEN --single-recon        $CYAN Single Recon"
    echo -e "  $CYAN-p, $GREEN --mass-sql-inject     $CYAN Mass SQL Injection"
    echo -e "  $CYAN-o, $GREEN --single-sql-inject   $CYAN Single SQL Injection"
    echo -e "  $CYAN-w, $GREEN --mass-xss            $CYAN Mass XSS Injection"
    echo -e "  $CYAN-x, $GREEN --single-xss          $CYAN Single XSS Injection"
    echo -e "  $CYAN-n, $GREEN --single-lfi          $CYAN Single LFI Injection"
    echo -e "  $CYAN-m, $GREEN --mass-assessment     $CYAN Mass Assessment"
    echo -e "  $CYAN-v, $GREEN --mass-dom-xss        $CYAN Mass DOM XSS Exploit"
    echo -e "  $CYAN-y, $GREEN --sub-takeover        $CYAN Subdomain Takeover"
    echo -e "  $CYAN-q, $GREEN --dirsearch-patrol    $CYAN Dirsearch Patrol"
    echo -e "  $CYAN-l, $GREEN --mass-js-finder      $CYAN Mass JS Finder (secret)"
    echo -e "  $CYAN-i, $GREEN --install-requirements$RED Install Requirements (Important)"
    echo -e "  $CYAN-h, $GREEN --help                $CYAN Display this help message"
    echo -e "$RESET"
}

# Function to handle the main logic based on options
handle_option() {
    script="${options_map[$1]}"
    if [[ -n "$script" ]]; then
        source "./function/$script" || { echo -e "${RED}Failed to source $script${RESET}"; exit 1; }
    else
        echo -e "${RED}Invalid option: $1${RESET}"
        display_help
        exit 1
    fi
}

# Main program starts here
if [[ $# -eq 0 ]]; then
    display_help
    exit 1
fi

# Loop through options passed to the script
for option in "$@"; do
    # Ensure the option is valid
    if [[ -z "${options_map[$option]}" ]]; then
        echo -e "${RED}Invalid option: $option${RESET}"
        display_help
        exit 1
    fi
    handle_option "$option"
done
